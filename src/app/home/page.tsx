'use client';

import { useState } from 'react';
import { Table, Card, Button } from 'antd';
import { EnvironmentOutlined, TableOutlined } from '@ant-design/icons';
import type { TableRowSelection } from 'antd/es/table/interface';
import { Dog } from '../../interfaces';
import { Modal, message } from 'antd';

import { fetchMatch } from '../fetch/match';
import { Filters } from './components/filters';
import { MapChart } from './components/mapChart';
import { useUserProvider } from '../userProvider';
import { DogTable } from './components/dogTable';




export default function DogsPage() {
  const [selectedDogs, setSelectedDogs] = useState<string[]>([]);

  const [loading, setLoading] = useState(false);

  const [match, setMatch] = useState<Dog>()
  const [mapView, setMapView] = useState(false)

  const { user , query} = useUserProvider()

  const { results } = query

  const [messageApi, contextHolder] = message.useMessage();
  const error = (message: string) => {
    messageApi.open({
      type: 'error',
      content: message,
    });
  };







  console.log('selectdogs', selectedDogs)



  const [isModalOpen, setIsModalOpen] = useState(false);

  const showModal = () => {
    setIsModalOpen(true);
  };

  const handleOk = () => {
    setIsModalOpen(false);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
  };










  const handleMatch = async () => {
    try {

      const match = await fetchMatch(selectedDogs)

      const findDog = results?.find(dog => dog.id === match)
      setMatch(findDog)
      showModal()
    } catch (e) {
      console.log('error', e)
      error('Please Select a Dog to Find a Match')
    }

  }








  return (
    <>

      {contextHolder}


      <div className="p-6 grid-cols-4 grid gap-5">
        <div className='col-start-1'>
          <Filters
          />
        </div>
        <Card className='col-start-2 col-end-5'>
          <div className='flex justify-between'>
            <h1 className=' mb-4 font-bold text-2xl'>
              Fetch Database Search
            </h1>
            <div className=' flex gap-2 items-center'>
              <Button className=' w-32' type="primary" htmlType="button" onClick={handleMatch}>
                Find Match
              </Button>
              <Button className=' w-32' type="default" htmlType="button" icon={mapView ? <TableOutlined /> : <EnvironmentOutlined />} onClick={() => setMapView(!mapView)}>
                {mapView ? 'Table View' : 'Map View'}
              </Button>
            </div>

          </div>


          {mapView ? <MapChart results={results} selectedDogs={selectedDogs} setSelectedDogs={setSelectedDogs} 
          /> : <DogTable selectedDogs={selectedDogs} setSelectedDogs={setSelectedDogs} />}
        </Card>
      </div>

      <Modal
        title="üê∂ You've Got a Match!"
        open={isModalOpen}
        onOk={handleOk}
        onCancel={handleCancel}
        centered
        footer={null}
      >
        {match ? (
          <div className="flex flex-col items-center text-center">
            <img
              src={match.img}
              alt={match.name}
              className="w-48 h-48 rounded-lg object-cover shadow-lg mb-4"
            />
            <h2 className="text-xl font-semibold">{match.name}</h2>
            <p className="text-gray-600">{match.age} years old</p>
            <p className="text-gray-600">{match.breed}</p>
            <p className="text-gray-500">üìç Located in {match.zip_code}</p>

            <button
              onClick={handleOk}
              className="mt-4 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition"
            >
              Learn More
            </button>
          </div>
        ) : (
          <p className="text-center text-gray-500">No match found.</p>
        )}
      </Modal>



    </>




  );
}



// General Requirements
// You first should have users enter their name and email on a login screen. Then, you should use this information to hit our login endpoint to authenticate with our service (see API Reference below).

// Once a user is successfully authenticated, they should be brought to a search page where they can browse available dogs. This page must meet the following requirements:

// Users must be able to filter by breed
// Results should be paginated
// Results should be sorted alphabetically by breed by default. Users should be able to modify this sort to be ascending or descending.
// All fields of the Dog object (except for id) must be presented in some form
// Users should be able to select their favorite dogs from the search results. When finished searching, they should be able to generate a match based on dogs added to the favorites list. A single match will be generated by sending all favorited dog IDs to the /dogs/match endpoint. You should display this match however you see fit.

// As for everything else, you have free rein, so get creative! We strongly encourage you to go beyond the minimum requirements to build something that showcases your strengths.

// You may find it helpful to make use of a component library.



// State: 
// breedFilter: string
// dataLength =  25: number , 10, 15, pageSize
// sort breed by default , sorting = ascending / descending 
// favorites: string [] - of dogs ids


// actions 
// find match button 
// breed search / filter
// location search / filter 
// - returns location , use zipcode, to use dog search
// - use map
// filter by age 
